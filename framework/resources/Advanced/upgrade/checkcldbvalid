set -x

if [[ $# -ne 3 ]]
then
  echo checkcldbvalid needs the cluster name, a current error count and timeout
  exit 1
fi

cluster=$1
errors=$2
timeoutvalue=$3
echo checkcldbvalid cluster $cluster errors $errors timeout $timeoutvalue

# kubectl exec -i -n $cluster admincli-0 -- bash -c 'echo mapr | maprlogin password -user mapr'
./get_mapr_ticket_for_pod $cluster admincli

interval=30
((end_time=${SECONDS}+$timeoutvalue))
start_time=$SECONDS
ready="0"
echo "START SECONDS", $SECONDS
while ((${SECONDS} < ${end_time}))
do
  kubectl exec -i admincli-0 -n $cluster -- /bin/bash -c "maprcli dump containerinfo -ids 1 -json | jq .data[0].ActiveServers.IP"
  valid=$(kubectl exec -i admincli-0 -n $cluster -- /bin/bash -c "maprcli dump containerinfo -ids 1 -json | jq .data[0].ActiveServers.IP" | grep VALID | wc -l)
  if [[ $valid -eq 3 ]]
  then
    # there are 3 valid cldb pods
    ready="1"
    break
  fi

  echo "There are $valid valid cldbs after " $(($SECONDS - $start_time)) " seconds"
  sleep ${interval}
done

if [ $ready -eq "0" ]
then
  echo "There are not 3 valid cldbs after " $(($end_time - $start_time)) " seconds"
  kubectl exec -i admincli-0 -n $cluster -- /bin/bash -c "maprcli dump containerinfo -ids 1 -json | jq .data[0].ActiveServers.IP"
  kubectl get pods -n $cluster
  ((errors++))
  exit $errors
fi

echo "There are $valid valid cldbs"
exit $errors
